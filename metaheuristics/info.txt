(ignorar esta nota)
Usar 2 algoritmos para 2 solucoes diferentes:

1-> usar evolucao genetica, onde mutamos para obter melhor resultados(atencao o prof falou de os piores são descartados. analisar isto, 
pois com isto podemos ter mais 1 algoritmo, que é, descartar os piores e gerar novos, e num outro, 
alterar os piores(vai de encontro ao indicado anteriormente),

2-> usar o pso. com o pso, tenho de:
N iterações?
obter o best -> e a partir deste, gerar mutações nos restantes com velocidade. 
esta velocidade é um objectivo de modo a tentar aproximar os piores a um resultado correcto
-------------

(05/01/2023)
Tentei usar o PSO mas parece que não se adequa bem ao nosso problema.
No final fiz com um algoritmo de evolução genética, onde agarrando o melhor candidato da população, é efectuada uma mutação neste candidato e é substituido pelo pior candidato.
A avaliação destes candidatos é feita pelo valor do fitness, que devolve o número de pontos de interesse dentro do circulo / candidato.


Algumas notas a adicionar no relatorio, nao me recordo se tem de ser em EN então fica já em EN:

- temos constrains, nomeadamente na mutação do elemento, onde limitamos a um "search space" valido.
Este search space é delimitado pelo min e max dos valores de x e y do hull gerado pelos pontos de interesse:
Limiting the values of the x and y coordinates of a point to be within a certain range or "zone" can be considered a constraint on the search space of a metaheuristic optimization algorithm.
This type of constraint can be used to ensure that the solutions generated by the algorithm are feasible or desirable according to the specific requirements of the problem.
For example, if you want to use a metaheuristic algorithm to find points on a plane that are inside a particular region, you can impose a constraint on the x and y values of the points to ensure that they are within the bounds of this region. This can help guide the optimization process towards solutions that are within the desired region and reduce the search space of the algorithm.

-Mutação do melhor candidato e substituicao do pior:
In an evolutionary genetic algorithm (EGA), the population of solutions is evolved over time through a process of selection, reproduction, and mutation.
This process is inspired by the principles of natural selection and genetics, and it is used to find good solutions to optimization problems.
One common approach in an EGA is to select the best candidates from the population and use them to generate new solutions through reproduction and mutation.
These new solutions are then added to the population, replacing the worst candidates.
This approach is similar to the one you described, where the best candidate is mutated to generate a new solution and the worst candidate is replaced with this new solution.
This can be considered a type of EGA, as it involves the evolution of the population through reproduction and mutation and the selection of the best candidates to generate new solutions.

This approach is based on the idea that the best point in the population is likely to be close to a good solution, and mutating this point can potentially lead to an even better solution. On the other hand, the worst point in the population is likely to be far from a good solution, and mutating this point is less likely to lead to an improvement.
It is generally not a good idea to mutate the worst point in the population, as this is unlikely to lead to an improvement in the overall quality of the solutions. Instead, it is typically better to focus on mutating the best points in the population, as these are more likely to be close to good solutions and to generate new points that are also good solutions.

---
relatorio:
demonstrar com outros objectivos: alterar o min e o max dos selectors;
dificuldades: a solucao retornar mais que 1 candidato; na mutação, limitar a mutação a um valor valido, ou seja, dentro do nosso search space
suggestions: evolve algorithm to work with geographical (lat long) coordinates
--


DONE: criar 1 ficheiro com os POI's iniciais fixos, para não ser diferente em todas as vezes que se executar o script (1)
DONE: tentar criar animação c/ as diferentes iterações (1)
DONE: update GA.py para ter também as 2 classes Point e Circle


TODO: relatorio + prints + prints c/ diferentes variações nos valores de POI's, nr de iteracoes, candidatos, etc (3)